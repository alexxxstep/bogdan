Во многих принципах демонстрации информации конечному пользователю,
 заложен такой подход, как "пагинация". 
 По сути, это ничто иное, как принцип демонстрации информации определенными частями,
 с возможностью переходить от одной части к другой, удобным способом.
 Принцип пагинации взят от обычной книги со страничками.
 Пагинация применяется на сайтах, при установке програм, где есть кнопочки "Next" и "back",
 в электронных читалках и программах обработки и взаимодействия с текстом.
 
Общие принципы пагинации:
Есть информация, которая разбита на то, что мы назваем страницами.
 Скажем текст мы показываем по 40 строк на одну страничку.
 Или ссылок по 10 на одну страничку, или последовательно показываем руководство и Т.Д.
 
Есть возможность быстро перейти на первую/последнюю страничку.
 Есть возможность перейти на следующую/предыдущую страничку.
 Перейти на 10/100 страниц вперед/назад одним движением. 
 Перейти на необходимый номер страницы.
 Узнать количество страниц. Узнать текущий номер страницы.
 Сделать закладку на определенной странице, зачастую именованую закладку,
 причем их можно делать на многих страницах.
 Просмотреть закладки и быстро перейти по закладке на страницу.
 Поиск по контексту во всех страницах, когда мы задаем необходимый контекст, а нам отдаются номера страничек, на которых этот контекст был найден.

 Общий взгляд на конструкцию пагинации следующий:
 есть объект, он и является главным объектом, который имеет следующие методы взаимодействия:
	Вернуть общее количество страниц;
	узнать текущий номер страницы;
	перейти на страницу вперед;
	Перейти на страницу назад;
	Перейти на Н страниц вперед, если такое возможно;
	Перейти на Н страниц назад, если такое возможно;
	Перейти на первую страницу;
	Перейти на последнюю страницу;
	Установить закладку с конкретным именем для текущей страницы, 
	обычно имена закладок должны быть уникальны и метод должен проверять
	наличие закладки с определенным именем, прежде чем создать новую;
	Установить закладку с именем для конкретной страницы по ее номеру, помним про уникальность имени;
	Вернуть список существующих закладок;
	Перейти на страницу по имени закладки;
	Метод поиска по контексту, который вернет список номеров страниц, где будет обнаружен указанный контекст;
	Вернуть текст текущей страницы.

Дальше, принципы реализации могут разниться, взависимости от того,
 кто и как представляет себе взаимодействие с пагинацией.
 Вот общие представления:
Каждая страница - это отдельная строка, которая записана в список.
 Сколько страниц, столько и строк в списке.
 Далее, взаимодействие с  переключением страниц и иже с ними, реализовать достаточно легко.
 
Закладка - это запись в словаре, где ключ - название закладки,
 значение - номер страницы, которую хранит закладка. 
 Да, это немного непривычное разделение объектов, 
 ведь в жизни закладка будет принадлежать, скорее всего, странице. 
 
 Впрочем, мы можем рассматривать закладку, как памятку с номером страницы,
 которая лежит отдельно от самой книги. 
 В таком случае, подобный принцип более четко отображает суть реализации.
 
При таком подходе, очень легко сделать методы управления закладками.

Поиск по контексту, будет перелистывать все странички и запоминать те,
которые будут содержать указанный текст.
 Номерами страниц, в таком случае, будут являться индексы списка,
 где они будут храниться.

Самый главный вопрос, какие данные и по каким критериям, 
мы будем делить на страницы. 

Для каждой системы, это свои данные, но давайте, в нашем случае, мы возьмем любой текст и на каждую страничку,
 поместим по 3 предложения.
 Предложениями будем считать то, что оканчивается на ".", "!", "?", "...", "???", "!!!"
 
Т.Е. делим текст по три предложения, каждые из которых и будут помещаться на страницу.
При создании объекта пагинации, передаем ему текст, который автоматически разбивается по страницам.

Естественно, для всего мы можем создавать свои объекты.
 Кпримеру мы можем создавать свои объекты страниц и закладок,
 таким образом мы сможем связывать закладку со страницей, а страницу с закладкой.
 
 Таким образом закладка будет помнить страницу,
 а страница будет знать о том, что на нее повесили закладку. 
 Подобных улучшайзеров может быть достаточно много, 
 но все это делается по желанию разработчика или при необходимости в конкретном функционале.
 
 
